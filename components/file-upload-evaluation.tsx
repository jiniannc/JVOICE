"use client"

import React, { useState, useRef, useMemo, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { employeeDB } from "@/lib/employee-database"
import { PDFSyncService } from "@/lib/pdf-sync-service"
import { 
  Upload, 
  FileAudio, 
  User, 
  Mic, 
  CheckCircle, 
  AlertCircle,
  X,
  Play,
  Pause
} from "lucide-react"

interface UserInfo {
  name: string
  employeeId: string
  language: string
  category: string
  email?: string
  broadcastCode?: string
  teamNumber?: string
  role?: string
  broadcastGrade?: string
}

interface FileUploadEvaluationProps {
  onComplete: (evaluationData: any) => void
  onBack: () => void
  authenticatedUser?: any
  hideHeader?: boolean
}

interface UploadedFile {
  file: File
  key: string
  scriptNum: number
  language: string
  audioUrl?: string
  isPlaying?: boolean
}

export function FileUploadEvaluation({ onComplete, onBack, authenticatedUser, hideHeader = false }: FileUploadEvaluationProps) {
  const [userInfo, setUserInfo] = useState<UserInfo>({
    name: "",
    employeeId: "",
    language: "",
    category: "",
    email: authenticatedUser?.email,
    broadcastCode: authenticatedUser?.broadcastCode,
    teamNumber: authenticatedUser?.teamNumber,
    role: authenticatedUser?.role,
    broadcastGrade: authenticatedUser?.broadcastGrade,
  })

  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([])
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [currentPlaying, setCurrentPlaying] = useState<string | null>(null)
  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [showLanguageModal, setShowLanguageModal] = useState(false)
  const [isDragOver, setIsDragOver] = useState(false)
  const [isProcessingLanguage, setIsProcessingLanguage] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const pdfSyncService = useRef(new PDFSyncService())

  // ÏßÅÏõêÏ†ïÎ≥¥ Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ÏóêÏÑú Ïù¥Î¶ÑÍ≥º ÏÇ¨Î≤à Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchEmployeeInfo = async () => {
      if (authenticatedUser?.email) {
        try {
          const employeeInfo = await employeeDB.findEmployeeByEmail(authenticatedUser.email)
          if (employeeInfo) {
            setUserInfo(prev => ({
              ...prev,
              name: employeeInfo.name,
              employeeId: employeeInfo.employeeId,
            }))
          }
        } catch (error) {
          console.error("ÏßÅÏõêÏ†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", error)
        }
      }
    }
    fetchEmployeeInfo()
  }, [authenticatedUser?.email])

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ïò§ÎîîÏò§ Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      if (currentAudio) {
        currentAudio.pause()
        currentAudio.currentTime = 0
      }
    }
  }, [currentAudio])

  const getCategoryOptions = useMemo(() => {
    if (userInfo.language === "korean-english") {
      return [
        { value: "Ïã†Í∑ú", label: "Ïã†Í∑ú" },
        { value: "Ïû¨ÏûêÍ≤©", label: "Ïû¨ÏûêÍ≤©" },
      ]
    } else if (userInfo.language === "japanese" || userInfo.language === "chinese") {
      return [
        { value: "Ïã†Í∑ú", label: "Ïã†Í∑ú" },
        { value: "ÏÉÅÏúÑ", label: "ÏÉÅÏúÑ" },
      ]
    }
    return []
  }, [userInfo.language])

  const getLanguageDisplay = (language: string) => {
    const displays: { [key: string]: string } = {
      "korean-english": "Ìïú/ÏòÅ",
      "korean": "ÌïúÍµ≠Ïñ¥",
      "english": "ÏòÅÏñ¥",
      japanese: "ÏùºÎ≥∏Ïñ¥",
      chinese: "Ï§ëÍµ≠Ïñ¥",
    }
    return displays[language] || language
  }

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (!files) return
    processFiles(Array.from(files))
  }

  const processFiles = (files: File[]) => {
    const newFiles: UploadedFile[] = []
    
    Array.from(files).forEach((file) => {
      // ÌååÏùº ÌôïÏû•Ïûê Ï∂îÏ∂ú
      const fileName = file.name.toLowerCase()
      const extension = fileName.split('.').pop()
      
      // ÏßÄÏõêÎêòÎäî Ïò§ÎîîÏò§ ÌòïÏãù Ï≤¥ÌÅ¨ (ÌôïÏû•Ïûê + MIME ÌÉÄÏûÖ)
      const supportedFormats = ['mp3', 'wav', 'webm', 'm4a', 'ogg', 'aac']
      const supportedMimeTypes = [
        'audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/webm', 
        'audio/mp4', 'audio/m4a', 'audio/ogg', 'audio/aac',
        'audio/x-m4a', 'audio/x-wav' // iOS Ï∂îÍ∞Ä MIME ÌÉÄÏûÖ
      ]
      
      const isValidExtension = extension && supportedFormats.includes(extension)
      const isValidMimeType = supportedMimeTypes.includes(file.type)
      
      if (!isValidExtension && !isValidMimeType) {
        setError(`ÏßÄÏõêÎêòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. ÌååÏùº: ${file.name} (${file.type})\nÏßÄÏõê ÌòïÏãù: ${supportedFormats.join(', ')}`)
        return
      }
      
      // ÌååÏùº ÌÅ¨Í∏∞ Ï≤¥ÌÅ¨ (50MB)
      if (file.size > 50 * 1024 * 1024) {
        setError(`ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§: ${(file.size / 1024 / 1024).toFixed(1)}MB. ÏµúÎåÄ 50MBÍπåÏßÄ ÏßÄÏõêÎê©ÎãàÎã§.`)
        return
      }
      
      // Ìïú/ÏòÅ Ïñ∏Ïñ¥Ïùò Í≤ΩÏö∞ Ïñ∏Ïñ¥ ÏÑ†ÌÉù Î™®Îã¨ ÌëúÏãú
      if (userInfo.language === "korean-english") {
        setSelectedFile(file)
        setShowLanguageModal(true)
        return
      }
      
      // Îã§Î•∏ Ïñ∏Ïñ¥Ïùò Í≤ΩÏö∞ Î∞îÎ°ú Ï≤òÎ¶¨
      const language = userInfo.language
      const key = `1-${language}`
      
      // Ï§ëÎ≥µ Ï≤¥ÌÅ¨
      const existingLanguage = uploadedFiles.find(f => f.language === language)
      if (existingLanguage) {
        setError(`${getLanguageDisplay(language)} ÌååÏùºÏù¥ Ïù¥ÎØ∏ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.`)
        return
      }
      
      const audioUrl = URL.createObjectURL(file)
      newFiles.push({
        file,
        key,
        scriptNum: 1,
        language,
        audioUrl,
        isPlaying: false
      })
    })

    setUploadedFiles(prev => [...prev, ...newFiles])
    setError(null)
  }

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(true)
  }

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(false)
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(false)
    
    const files = Array.from(e.dataTransfer.files)
    processFiles(files)
  }

  const removeFile = (key: string) => {
    setUploadedFiles(prev => {
      const file = prev.find(f => f.key === key)
      if (file?.audioUrl) {
        URL.revokeObjectURL(file.audioUrl)
      }
      return prev.filter(f => f.key !== key)
    })
  }

  const handleLanguageSelect = async (language: string) => {
    console.log("üîç [FileUpload] Ïñ∏Ïñ¥ ÏÑ†ÌÉù:", language, "ÌååÏùº:", selectedFile?.name)
    
    if (!selectedFile) {
      console.error("‚ùå [FileUpload] ÏÑ†ÌÉùÎêú ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§")
      return
    }

    setIsProcessingLanguage(true)
    
    try {
      const key = `1-${language}`
      console.log("üîç [FileUpload] ÏÉùÏÑ±Îêú ÌÇ§:", key)
      
      // Ï§ëÎ≥µ Ï≤¥ÌÅ¨
      const existingLanguage = uploadedFiles.find(f => f.language === language)
      if (existingLanguage) {
        console.log("‚ùå [FileUpload] Ï§ëÎ≥µ Ïñ∏Ïñ¥ Í∞êÏßÄ:", language)
        setError(`${getLanguageDisplay(language)} ÌååÏùºÏù¥ Ïù¥ÎØ∏ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.`)
        setShowLanguageModal(false)
        setSelectedFile(null)
        return
      }
      
      // ÌååÏùº Ï≤òÎ¶¨ ÏßÄÏó∞ (UI Î∞òÏùëÏÑ± Ìñ•ÏÉÅ)
      await new Promise(resolve => setTimeout(resolve, 100))
      
      const audioUrl = URL.createObjectURL(selectedFile)
      console.log("üîç [FileUpload] Ïò§ÎîîÏò§ URL ÏÉùÏÑ±:", audioUrl.substring(0, 50) + "...")
      
      const newFile: UploadedFile = {
        file: selectedFile,
        key,
        scriptNum: 1,
        language,
        audioUrl,
        isPlaying: false
      }
      
      console.log("üîç [FileUpload] ÏÉà ÌååÏùº Í∞ùÏ≤¥ ÏÉùÏÑ±:", {
        key: newFile.key,
        language: newFile.language,
        fileName: newFile.file.name,
        fileSize: newFile.file.size
      })
      
      setUploadedFiles(prev => {
        const updated = [...prev, newFile]
        console.log("üîç [FileUpload] ÏóÖÎ°úÎìúÎêú ÌååÏùº Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏:", updated.map(f => ({ key: f.key, language: f.language })))
        return updated
      })
      
      setShowLanguageModal(false)
      setSelectedFile(null)
      setError(null)
      
      console.log("‚úÖ [FileUpload] Ïñ∏Ïñ¥ ÏÑ†ÌÉù Ï≤òÎ¶¨ ÏôÑÎ£å")
    } catch (error) {
      console.error("‚ùå [FileUpload] Ïñ∏Ïñ¥ ÏÑ†ÌÉù Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:", error)
      setError("ÌååÏùº Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.")
      setShowLanguageModal(false)
      setSelectedFile(null)
    } finally {
      setIsProcessingLanguage(false)
    }
  }

  const playAudio = (key: string) => {
    const file = uploadedFiles.find(f => f.key === key)
    if (!file?.audioUrl) return

    if (currentPlaying === key) {
      // ÏùºÏãúÏ†ïÏßÄ
      if (currentAudio) {
        currentAudio.pause()
        setCurrentAudio(null)
      }
      setCurrentPlaying(null)
      setUploadedFiles(prev => prev.map(f => ({ ...f, isPlaying: false })))
    } else {
      // Îã§Î•∏ Ïò§ÎîîÏò§Í∞Ä Ïû¨ÏÉù Ï§ëÏù¥Î©¥ Ï†ïÏßÄ
      if (currentAudio) {
        currentAudio.pause()
        currentAudio.currentTime = 0
      }
      
      // Ïû¨ÏÉù
      setCurrentPlaying(key)
      setUploadedFiles(prev => prev.map(f => ({ ...f, isPlaying: f.key === key })))
      
      const audio = new Audio(file.audioUrl)
      audio.onended = () => {
        setCurrentPlaying(null)
        setCurrentAudio(null)
        setUploadedFiles(prev => prev.map(f => ({ ...f, isPlaying: false })))
      }
      audio.onpause = () => {
        setCurrentPlaying(null)
        setCurrentAudio(null)
        setUploadedFiles(prev => prev.map(f => ({ ...f, isPlaying: false })))
      }
      setCurrentAudio(audio)
      audio.play()
    }
  }

  // ÌååÏùºÏùÑ Base64Î°ú Î≥ÄÌôòÌïòÎäî Ìó¨Ìçº Ìï®Ïàò
  const fileToBase64 = (file: File): Promise<string> =>
    new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = () => resolve(reader.result as string)
      reader.onerror = () => reject(reader.error)
      reader.readAsDataURL(file)
    })

  const handleSubmit = async () => {
    if (!userInfo.name || !userInfo.employeeId || !userInfo.language || !userInfo.category) {
      setError("Î™®Îì† ÌïÑÏàò Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
      return
    }

    if (uploadedFiles.length === 0) {
      setError("ÏµúÏÜå ÌïòÎÇòÏùò ÎÖπÏùå ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.")
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      // ÌååÏùºÎì§ÏùÑ Base64Î°ú Î≥ÄÌôòÌïòÍ≥† 5Í∞ú Ïä§ÌÅ¨Î¶ΩÌä∏Î°ú Î≥µÏ†ú
      const recordings: { [key: string]: string } = {}
      const originalFiles: { [key: string]: string } = {}

      for (const uploadedFile of uploadedFiles) {
        // ÌååÏùºÏùÑ Base64Î°ú Î≥ÄÌôò
        const base64Data = await fileToBase64(uploadedFile.file)
        
        // 1Í∞ú ÌååÏùºÏùÑ 5Í∞ú Ïä§ÌÅ¨Î¶ΩÌä∏Î°ú Î≥µÏ†ú (Í∏∞Ï°¥ ÏãúÏä§ÌÖú Ìò∏ÌôòÏÑ±)
        for (let i = 1; i <= 5; i++) {
          const scriptKey = `${i}-${uploadedFile.language}`
          recordings[scriptKey] = base64Data
        }
        
        // ÎîîÎ≤ÑÍπÖ: ÌååÏùº ÌÅ¨Í∏∞ Î∞è DataURL Í∏∏Ïù¥ ÌôïÏù∏
        console.log(`ÌååÏùº ÌÅ¨Í∏∞: ${uploadedFile.file.name} - ${(uploadedFile.file.size / 1024 / 1024).toFixed(2)}MB`)
        console.log(`Base64 Í∏∏Ïù¥: ${base64Data.length} characters`)
        
        // original file list for reference
        originalFiles[uploadedFile.key] = uploadedFile.file.name
      }

      // ÌèâÍ∞Ä Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ÌïÑÏàò Ï†ïÎ≥¥Îßå Ìè¨Ìï®)
      const evaluationData = {
        name: userInfo.name,
        employeeId: userInfo.employeeId,
        language: userInfo.language,
        category: userInfo.category,
        submittedAt: new Date().toISOString(),
        recordingCount: 5,
        scriptNumbers: [1, 2, 3, 4, 5],
        recordings: recordings,
        status: "pending",
        comment: "",
        isFileUpload: true,
      }

      // APIÎ•º ÌÜµÌï¥ ÏÑúÎ≤ÑÏóê Ï†ÄÏû•
      const uploadData = {
        name: userInfo.name,
        employeeId: userInfo.employeeId,
        language: userInfo.language,
        category: userInfo.category,
        submittedAt: new Date().toISOString(),
        recordingCount: 5,
        scriptNumbers: [1, 2, 3, 4, 5],
        recordings: recordings,
        comment: "",
      }

      const response = await fetch("/api/recordings/submit-database", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(uploadData),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "ÌååÏùº ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
      }

      const result = await response.json()
      console.log("ÌååÏùº ÏóÖÎ°úÎìú ÏÑ±Í≥µ:", result)

      // Ï†úÏ∂ú ÏôÑÎ£å ÌåùÏóÖÏ∞Ω ÌëúÏãú
      alert(`‚úÖ ÎÖπÏùå ÌååÏùº Ï†úÏ∂úÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!\n\n${userInfo.name} (${userInfo.employeeId}) ÎãòÏùò ÎÖπÏùå ÌååÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†úÏ∂úÎêòÏóàÏäµÎãàÎã§.\n\nÍ≤∞Í≥ºÎäî ÏõîÎßê Í≥µÏßÄÎ•º ÌÜµÌï¥ ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.`)

      // ÏÑ±Í≥µ Ïãú Í∞ÑÎã®Ìïú Îç∞Ïù¥ÌÑ∞Îßå Ï†ÑÎã¨
      onComplete({
        success: true,
        evaluationId: result.evaluationId,
        message: result.message
      })
    } catch (error) {
      console.error("ÌååÏùº Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:", error)
      setError("ÌååÏùº Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.")
    } finally {
      setIsSubmitting(false)
    }
  }

  const requiredFiles = useMemo(() => {
    if (userInfo.language === "korean-english") {
      return ["ÌïúÍµ≠Ïñ¥ ÌååÏùº", "ÏòÅÏñ¥ ÌååÏùº"]
    } else {
      return [`${getLanguageDisplay(userInfo.language)} ÌååÏùº`]
    }
  }, [userInfo.language])


  
  const missingFiles = useMemo(() => {
    const currentUploadedLanguages = uploadedFiles.map(f => f.language)
    console.log("üîç [FileUpload] ÌòÑÏû¨ ÏóÖÎ°úÎìúÎêú Ïñ∏Ïñ¥:", currentUploadedLanguages)
    console.log("üîç [FileUpload] ÌïÑÏöîÌïú ÌååÏùº:", requiredFiles)
    console.log("üîç [FileUpload] ÏÑ†ÌÉùÎêú Ïñ∏Ïñ¥:", userInfo.language)
    
    return requiredFiles.filter((_: string, index: number) => {
      if (userInfo.language === "korean-english") {
        const isMissing = index === 0 ? !currentUploadedLanguages.includes("korean") : !currentUploadedLanguages.includes("english")
        console.log(`üîç [FileUpload] ${index === 0 ? 'ÌïúÍµ≠Ïñ¥' : 'ÏòÅÏñ¥'} ÌååÏùº ${isMissing ? 'ÎàÑÎùΩ' : 'ÏûàÏùå'}`)
        return isMissing
      } else {
        const isMissing = !currentUploadedLanguages.includes(userInfo.language)
        console.log(`üîç [FileUpload] ${userInfo.language} ÌååÏùº ${isMissing ? 'ÎàÑÎùΩ' : 'ÏûàÏùå'}`)
        return isMissing
      }
    })
  }, [requiredFiles, uploadedFiles, userInfo.language])

  return (
    <div className={hideHeader ? "p-4" : "bg-white p-4"}>
      <div className="max-w-4xl mx-auto">
        {!hideHeader && (
          <div className="mb-6 relative" style={{ marginTop: '15px' }}>
            <div className="flex justify-between items-start">
              <h1 className="text-3xl font-bold text-gray-900 mb-2">üì§ ÎÖπÏùå ÌååÏùº Ï†úÏ∂ú(PUS)</h1>
              <Button 
                onClick={onBack} 
                variant="ghost" 
                size="sm"
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <X className="w-5 h-5" />
              </Button>
            </div>
          </div>
        )}

        <div className="grid lg:grid-cols-2 gap-6">
          {/* ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏûÖÎ†• */}
          <Card className="bg-white shadow-lg rounded-2xl border hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="bg-gray-50/80 rounded-t-2xl">
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5 text-purple-600" />
                ÏùëÏãúÏûê Ï†ïÎ≥¥
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="name">Ïù¥Î¶Ñ</Label>
                <Input
                  id="name"
                  value={userInfo.name}
                  onChange={(e) => setUserInfo(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="ÏÑ±Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  disabled={authenticatedUser ? true : false}
                  className={authenticatedUser ? "bg-gray-50" : ""}
                />
              </div>

              <div>
                <Label htmlFor="employeeId">ÏÇ¨Î≤à</Label>
                <Input
                  id="employeeId"
                  value={userInfo.employeeId}
                  onChange={(e) => setUserInfo(prev => ({ ...prev, employeeId: e.target.value }))}
                  placeholder="ÏßÅÏõêÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  disabled={authenticatedUser ? true : false}
                  className={authenticatedUser ? "bg-gray-50" : ""}
                />
              </div>

              <div>
                <Label htmlFor="language">Ïñ∏Ïñ¥ ÏÑ†ÌÉù</Label>
                <Select
                  value={userInfo.language}
                  onValueChange={(value) => {
                    // Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω Ïãú Ïä§ÌÅ¨Î¶ΩÌä∏ Ï∫êÏãú Ï¥àÍ∏∞Ìôî
                    pdfSyncService.current.clearScriptCache()
                    setUserInfo(prev => ({ ...prev, language: value, category: "" }))
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="ÌèâÍ∞Ä Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="korean-english">üá∞üá∑üá∫üá∏ ÌïúÍµ≠Ïñ¥/ÏòÅÏñ¥</SelectItem>
                    <SelectItem value="japanese">üáØüáµ ÏùºÎ≥∏Ïñ¥</SelectItem>
                    <SelectItem value="chinese">üá®üá≥ Ï§ëÍµ≠Ïñ¥</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {userInfo.language && (
                <div>
                  <Label htmlFor="category">ÌèâÍ∞Ä Íµ¨Î∂Ñ</Label>
                  <Select
                    value={userInfo.category}
                    onValueChange={(value) => setUserInfo(prev => ({ ...prev, category: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="ÌèâÍ∞Ä Ïú†ÌòïÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" />
                    </SelectTrigger>
                    <SelectContent>
                      {getCategoryOptions.map((option: { value: string; label: string }) => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
            </CardContent>
          </Card>

          {/* ÌååÏùº ÏóÖÎ°úÎìú */}
          <Card className="bg-white shadow-lg rounded-2xl border hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="bg-gray-50/80 rounded-t-2xl">
              <CardTitle className="flex items-center gap-2">
                <FileAudio className="w-5 h-5 text-purple-600" />
                ÎÖπÏùå ÌååÏùº ÏóÖÎ°úÎìú
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div 
                className={`border-2 border-dashed rounded-lg p-6 text-center transition-all duration-200 ${
                  !userInfo.language 
                    ? 'border-gray-200 bg-gray-50' 
                    : isDragOver 
                      ? 'border-blue-400 bg-blue-50' 
                      : 'border-gray-300 hover:border-gray-400'
                }`}
                onDragOver={userInfo.language ? handleDragOver : undefined}
                onDragLeave={userInfo.language ? handleDragLeave : undefined}
                onDrop={userInfo.language ? handleDrop : undefined}
              >
                <Upload className={`w-8 h-8 mx-auto mb-2 transition-colors duration-200 ${
                  !userInfo.language 
                    ? 'text-gray-300' 
                    : isDragOver 
                      ? 'text-blue-500' 
                      : 'text-gray-400'
                }`} />
                {!userInfo.language ? (
                  <>
                    <p className="text-sm text-gray-500 mb-2">
                      Î®ºÏ†Ä Ïñ∏Ïñ¥Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî
                    </p>
                    <p className="text-xs text-gray-400 mb-4">
                      Ïñ∏Ïñ¥ ÏÑ†ÌÉù ÌõÑ ÌååÏùº ÏóÖÎ°úÎìúÍ∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§
                    </p>
                  </>
                ) : (
                  <>
                    <p className="text-sm text-gray-600 mb-2">
                      ÎÖπÏùå ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò Ïó¨Í∏∞Î°ú ÎìúÎûòÍ∑∏ÌïòÏÑ∏Ïöî
                    </p>
                    <p className="text-xs text-gray-500 mb-2">
                      <span className="text-red-600 font-bold">Ïñ∏Ïñ¥Î≥ÑÎ°ú 1Í∞ú ÌååÏùºÏî© ÏóÖÎ°úÎìú</span>
                    </p>
                    <div className="text-xs text-gray-600 mb-4 text-left bg-gray-50 p-3 rounded border">
                      <p className="font-medium mb-1">ÌååÏùºÎ™Ö Í∑úÏπô:</p>
                      <p className="text-gray-700">123456K ÌôçÍ∏∏Îèô(ÌïúÍµ≠Ïñ¥)</p>
                      <p className="text-gray-700">123456K ÌôçÍ∏∏Îèô(ÏòÅÏñ¥)</p>
                      <p className="text-gray-700">123456K ÌôçÍ∏∏Îèô(ÏùºÎ≥∏Ïñ¥)</p>
                      <p className="text-gray-700">123456K ÌôçÍ∏∏Îèô(Ï§ëÍµ≠Ïñ¥)</p>
                    </div>
                    <Button
                      onClick={() => fileInputRef.current?.click()}
                      variant="outline"
                      className="w-full"
                    >
                      ÌååÏùº ÏÑ†ÌÉù
                    </Button>
                    <input
                      ref={fileInputRef}
                      type="file"
                      multiple
                      accept="audio/*,.mp3,.wav,.webm,.m4a,.ogg,.aac"
                      onChange={handleFileSelect}
                      className="hidden"
                    />
                  </>
                )}
              </div>

              {/* ÏóÖÎ°úÎìúÎêú ÌååÏùº Î™©Î°ù */}
              {uploadedFiles.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-medium">ÏóÖÎ°úÎìúÎêú ÌååÏùº ({uploadedFiles.length}Í∞ú)</h4>
                  <div className="space-y-2 max-h-60 overflow-y-auto">
                    {uploadedFiles.map((file) => (
                      <div key={file.key} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                        <div className="flex items-center gap-2">
                          <FileAudio className="w-4 h-4 text-blue-600" />
                          <span className="text-sm font-medium">{file.key}</span>
                          <Badge variant="outline" className="text-xs">
                            {file.file.name}
                          </Badge>
                        </div>
                        <div className="flex items-center gap-1">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => playAudio(file.key)}
                          >
                            {file.isPlaying ? (
                              <Pause className="w-3 h-3" />
                            ) : (
                              <Play className="w-3 h-3" />
                            )}
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => removeFile(file.key)}
                            className="text-red-600"
                          >
                            <X className="w-3 h-3" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* ÌïÑÏöîÌïú ÌååÏùº ÏïàÎÇ¥ */}
              {userInfo.language && (
                <div className="space-y-2">
                  <h4 className="font-medium">ÌïÑÏöîÌïú ÌååÏùº</h4>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    {requiredFiles.map((fileType: string, index: number) => {
                      const currentUploadedLanguages = uploadedFiles.map(f => f.language)
                      const isUploaded = userInfo.language === "korean-english" 
                        ? (index === 0 ? currentUploadedLanguages.includes("korean") : currentUploadedLanguages.includes("english"))
                        : currentUploadedLanguages.includes(userInfo.language)
                      
                      console.log(`üîç [FileUpload] ÌååÏùº ÏÉÅÌÉú ÌôïÏù∏: ${fileType} - ${isUploaded ? 'ÏóÖÎ°úÎìúÎê®' : 'ÎàÑÎùΩ'}`)
                      
                      return (
                        <div
                          key={fileType}
                          className={`flex items-center gap-2 p-2 rounded ${
                            isUploaded
                              ? "bg-green-50 text-green-700 border border-green-200"
                              : "bg-gray-50 text-gray-500 border border-gray-200"
                          }`}
                        >
                          {isUploaded ? (
                            <CheckCircle className="w-4 h-4" />
                          ) : (
                            <AlertCircle className="w-4 h-4" />
                          )}
                          {fileType}
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}
        {error && (
          <Alert className="mt-4 border-red-200 bg-red-50">
            <AlertCircle className="w-4 h-4 text-red-600" />
            <AlertDescription className="text-red-800">{error}</AlertDescription>
          </Alert>
        )}

        {/* Ï†úÏ∂ú Î≤ÑÌäº */}
        <div className="mt-6 text-center">
          <Button
            onClick={handleSubmit}
            disabled={isSubmitting || missingFiles.length > 0}
            className="px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white"
          >
            {isSubmitting ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-2 border-blue-200 border-t-blue-600 bg-transparent mr-2"></div>
                ÏóÖÎ°úÎìú Ï§ë...
              </>
            ) : (
              <>
                <Upload className="w-4 h-4 mr-2" />
                Ï†úÏ∂úÌïòÍ∏∞
              </>
            )}
          </Button>
          
          {userInfo.language && missingFiles.length > 0 && (
            <p className="text-sm text-orange-600 mt-2">
              {missingFiles.length}Í∞úÏùò ÌååÏùºÏù¥ Îçî ÌïÑÏöîÌï©ÎãàÎã§: {missingFiles.join(", ")}
            </p>
          )}
        </div>
      </div>

      {/* Ïñ∏Ïñ¥ ÏÑ†ÌÉù Î™®Îã¨ */}
      {showLanguageModal && selectedFile && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center">
          <div className="bg-white rounded-2xl shadow-xl w-full max-w-md mx-4">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-900">Ïñ∏Ïñ¥ ÏÑ†ÌÉù</h2>
                <button 
                  onClick={() => {
                    if (!isProcessingLanguage) {
                      setShowLanguageModal(false)
                      setSelectedFile(null)
                    }
                  }} 
                  className={`p-2 rounded-lg ${isProcessingLanguage ? 'text-gray-400 cursor-not-allowed' : 'hover:bg-gray-100'}`}
                  disabled={isProcessingLanguage}
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
              
              <div className="mb-4">
                <p className="text-sm text-gray-600 mb-2">ÌååÏùº: {selectedFile.name}</p>
                <p className="text-sm text-gray-600">Ïù¥ ÌååÏùºÏù¥ Ïñ¥Îñ§ Ïñ∏Ïñ¥Î°ú ÎÖπÏùåÎêòÏóàÎäîÏßÄ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.</p>
              </div>
              
              {isProcessingLanguage && (
                <div className="mb-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <div className="flex items-center gap-3">
                    <div className="animate-spin rounded-full h-5 w-5 border-2 border-blue-200 border-t-blue-600"></div>
                    <div>
                      <p className="text-sm font-medium text-blue-800">Î¨∏ÏïàÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...</p>
                      <p className="text-xs text-blue-600">Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî</p>
                    </div>
                  </div>
                </div>
              )}
              
              <div className="space-y-3">
                <Button
                  onClick={() => handleLanguageSelect("korean")}
                  className="w-full h-12 text-left justify-start"
                  variant="outline"
                  disabled={isProcessingLanguage}
                >
                  <div className="flex items-center gap-3">
                    <div className="bg-red-500 text-white px-2 py-1 rounded text-sm font-bold">KR</div>
                    <div>
                      <div className="font-medium">ÌïúÍµ≠Ïñ¥</div>
                      <div className="text-xs text-gray-500">Korean</div>
                    </div>
                  </div>
                </Button>
                
                <Button
                  onClick={() => handleLanguageSelect("english")}
                  className="w-full h-12 text-left justify-start"
                  variant="outline"
                  disabled={isProcessingLanguage}
                >
                  <div className="flex items-center gap-3">
                    <div className="bg-blue-600 text-white px-2 py-1 rounded text-sm font-bold">GB</div>
                    <div>
                      <div className="font-medium">ÏòÅÏñ¥</div>
                      <div className="text-xs text-gray-500">English</div>
                    </div>
                  </div>
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 